<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Junior.Common</name>
    </assembly>
    <members>
        <member name="T:Junior.Common.AsyncLazy`1">
            <summary>
            Initializes a value lazily and asynchronously by using <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">A delegate that returns the value.</param>
        </member>
        <member name="M:Junior.Common.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">A delegate that returns a <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
        </member>
        <member name="T:Junior.Common.AwaitableTaskSchedulerFactory`1">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <typeparam name="T">An <see cref="T:Junior.Common.AwaitableTaskScheduler"/>.</typeparam>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <returns>An <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <returns>An <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action{System.Object},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/> delegate.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/> delegate.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/> delegate.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.AwaitableTaskSchedulerFactory`1.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see> on a new <typeparamref name="T"/> instance.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/> delegate.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Junior.Common.BinaryGuid">
            <summary>
            Allows conversion to and from <see cref="T:System.Guid"/> and an <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.BinaryGuid.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.BinaryGuid"/> class.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.BinaryGuid"/> class.
            </summary>
            <param name="guidBytes">An array of bytes representing a GUID.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.CompareTo(Junior.Common.BinaryGuid)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.CompareTo(System.Byte[])">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.CompareTo(System.Guid)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.Equals(Junior.Common.BinaryGuid)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.Equals(System.Byte[])">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.Equals(System.Guid)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.BinaryGuid.op_Implicit(Junior.Common.BinaryGuid)~System.Guid">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.BinaryGuid"/> to a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.BinaryGuid"/>.</param>
            <returns>A <see cref="T:System.Guid"/> representing the specified <see cref="T:Junior.Common.BinaryGuid"/>.</returns>
        </member>
        <member name="M:Junior.Common.BinaryGuid.op_Implicit(Junior.Common.BinaryGuid)~System.Byte[]">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.BinaryGuid"/> to an <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.BinaryGuid"/>.</param>
            <returns>An <see cref="T:System.Array"/> of <see cref="T:System.Byte"/> representing the specified <see cref="T:Junior.Common.BinaryGuid"/>.</returns>
        </member>
        <member name="M:Junior.Common.BinaryGuid.op_Implicit(System.Guid)~Junior.Common.BinaryGuid">
            <summary>
            Implicitly converts from a <see cref="T:System.Guid"/> to a <see cref="T:Junior.Common.BinaryGuid"/>.
            </summary>
            <param name="value">A <see cref="T:System.Guid"/>.</param>
            <returns>A <see cref="T:Junior.Common.BinaryGuid"/> representing the specified <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Junior.Common.BinaryGuid.op_Implicit(System.Byte[])~Junior.Common.BinaryGuid">
            <summary>
            Implicitly converts from an <see cref="T:System.Array"/> of <see cref="T:System.Byte"/> to a <see cref="T:Junior.Common.BinaryGuid"/>.
            </summary>
            <param name="value">An <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.</param>
            <returns>A <see cref="T:Junior.Common.BinaryGuid"/> representing the specified <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Junior.Common.BinaryGuid.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.BinaryGuid.op_Equality(Junior.Common.BinaryGuid,Junior.Common.BinaryGuid)">
            <summary>
            Determines if two <see cref="T:Junior.Common.BinaryGuid"/> instances represent the same GUID.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.BinaryGuid"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.BinaryGuid"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.BinaryGuid"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.BinaryGuid.op_Inequality(Junior.Common.BinaryGuid,Junior.Common.BinaryGuid)">
            <summary>
            Determines if two <see cref="T:Junior.Common.BinaryGuid"/> instances do not represent the same GUID.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.BinaryGuid"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.BinaryGuid"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.BinaryGuid"/> instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.BinaryGuid.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.BinaryGuid.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Junior.Common.AwaitableTaskScheduler">
            <summary>
            A task scheduler that executes queued tasks asynchronously and provides a task that completes when all queued tasks have completed.
            </summary>
            <remarks>
            https://github.com/ChadBurggraf/parallel-extensions-extras/blob/master/TaskSchedulers/LimitedConcurrencyLevelTaskScheduler.cs
            </remarks>
        </member>
        <member name="M:Junior.Common.AwaitableTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task"/> to the scheduler.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be queued.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> argument is null.</exception>
        </member>
        <member name="M:Junior.Common.AwaitableTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Determines whether the provided <see cref="T:System.Threading.Tasks.Task"/> can be executed synchronously in this call, and if it can, executes it.
            </summary>
            <returns>
            A Boolean value indicating whether the task was executed inline.
            </returns>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be executed.</param>
            <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> argument is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="task"/> was already executed.</exception>
        </member>
        <member name="M:Junior.Common.AwaitableTaskScheduler.GetScheduledTasks">
            <summary>
            For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task"/> instances currently queued to the scheduler waiting to be executed.
            </summary>
            <returns>
            An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.
            </returns>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="M:Junior.Common.AwaitableTaskScheduler.TryExecuteTaskWithCompletionTracking(System.Threading.Tasks.Task)">
            <summary>
            Attempts to execute the a task and track its completion.
            </summary>
            <param name="task">A task to execute.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="task"/> is null.</exception>
        </member>
        <member name="P:Junior.Common.AwaitableTaskScheduler.Factory">
            <summary>
            Gets a factory that can start a <see cref="T:System.Threading.Tasks.Task"/> on an <see cref="T:Junior.Common.AwaitableTaskScheduler"/>.
            </summary>
        </member>
        <member name="P:Junior.Common.AwaitableTaskScheduler.CompletionTask">
            <summary>
            Gets a task that completes when all queued tasks have completed.
            </summary>
        </member>
        <member name="T:Junior.Common.DoubleToLong">
            <summary>
            Safely converts a <see cref="T:System.Double"/> to an <see cref="T:System.Int64"/> for floating-point comparisons.
            </summary>
        </member>
        <member name="M:Junior.Common.DoubleToLong.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.DoubleToLong"/> class.
            </summary>
            <param name="doubleValue">The <see cref="T:System.Double"/> value to be converted to an <see cref="T:System.Int64"/>.</param>
        </member>
        <member name="F:Junior.Common.DoubleToLong.LongValue">
            <summary>
            Gets the floating-point value as an integer.
            </summary>
        </member>
        <member name="F:Junior.Common.DoubleToLong.DoubleValue">
            <summary>
            Gets the floating-point value.
            </summary>
        </member>
        <member name="M:Junior.Common.DoubleToLong.Equals(Junior.Common.DoubleToLong)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.DoubleToLong.Equals(System.Double)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.DoubleToLong.Equals(System.Int64)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.DoubleToLong.CompareTo(Junior.Common.DoubleToLong)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.DoubleToLong.CompareTo(System.Double)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.DoubleToLong.CompareTo(System.Int64)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.DoubleToLong.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.DoubleToLong.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.DoubleToLong.op_Implicit(Junior.Common.DoubleToLong)~System.Int64">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.DoubleToLong"/> to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.DoubleToLong"/>.</param>
            <returns>An integer representation of the floating-point value.</returns>
        </member>
        <member name="M:Junior.Common.DoubleToLong.op_Implicit(Junior.Common.DoubleToLong)~System.Double">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.DoubleToLong"/> to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.DoubleToLong"/>.</param>
            <returns>The floating-point value.</returns>
        </member>
        <member name="M:Junior.Common.DoubleToLong.op_Equality(Junior.Common.DoubleToLong,Junior.Common.DoubleToLong)">
            <summary>
            Determines if two <see cref="T:Junior.Common.DoubleToLong"/> instances have the same integer representation.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.DoubleToLong"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.DoubleToLong"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.DoubleToLong"/> have the same integer representation; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.DoubleToLong.op_Inequality(Junior.Common.DoubleToLong,Junior.Common.DoubleToLong)">
            <summary>
            Determines if two <see cref="T:Junior.Common.DoubleToLong"/> instances have different integer representations.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.DoubleToLong"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.DoubleToLong"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.DoubleToLong"/> have different integer representations; otherwise, false.</returns>
        </member>
        <member name="T:Junior.Common.DelegateDictionary`2">
            <summary>
            A caching dictionary of <see cref="T:System.Func`2"/> tracked by <typeparamref name="TKey"/>.
            Delegate return values are cached when a delegate is invoked.
            </summary>
        </member>
        <member name="M:Junior.Common.DelegateDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Junior.Common.DelegateDictionary`2.ClearAll">
            <summary>
            Clears all delegates and cached values.
            </summary>
        </member>
        <member name="M:Junior.Common.DelegateDictionary`2.ClearCachedValues">
            <summary>
            Clears all cached values. Retrieving values will re-invoke the delegates.
            </summary>
        </member>
        <member name="M:Junior.Common.DelegateDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains the specified key.
            </summary>
            <param name="key">A key.</param>
            <returns>true if the dictionary contains <paramref name="key"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.DelegateDictionary`2.Add(`0,System.Func{`0,`1})">
            <summary>
            Adds an entry with the specified key and delegate to the dictionary. The delegate is not invoked.
            </summary>
            <param name="key">A key.</param>
            <param name="delegate">A <see cref="T:System.Func`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="delegate"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.DelegateDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the dictionary.
            </summary>
            <param name="key">A key.</param>
            <returns>true if the dictionary contains an entry with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.DelegateCount">
            <summary>
            Gets the number of delegates in the dictionary.
            </summary>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.CachedValueCount">
            <summary>
            Gets the number of cached values in the dictionary.
            </summary>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.Item(`0)">
            <summary>
            Gets the return value of the delegate with the specified key.
            </summary>
            <param name="key">A key.</param>
            <returns>The return value of the delegate with key <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is null.</exception>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.Item(`0,System.Func{`0,`1})">
            <summary>
            Adds a delegate to the dictionary if it is not already in the dictionary, then returns the value of the delegate.
            </summary>
            <param name="key">A key.</param>
            <param name="delegate">A <see cref="T:System.Func`2"/>.</param>
            <returns>The return value of the delegate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is null.</exception>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.Keys">
            <summary>
            Gets all keys in the dictionary.
            </summary>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.CachedValues">
            <summary>
            Gets all cached values in the dictionary.
            </summary>
        </member>
        <member name="P:Junior.Common.DelegateDictionary`2.AllValues">
            <summary>
            Gets all values for all delegates in the dictionary. Uninvoked delegates will be invoked.
            </summary>
        </member>
        <member name="T:Junior.Common.CachedDelegate`2">
            <summary>
            Invokes a delegate only if a provided key is different than the last execution.
            </summary>
        </member>
        <member name="M:Junior.Common.CachedDelegate`2.Invoke(`0,System.Func{`1})">
            <summary>
            Invokes <paramref name="delegate"/> only if <paramref name="key"/> is different than the last time <see cref="M:Junior.Common.CachedDelegate`2.Invoke(`0,System.Func{`1})"/> was called.
            If <see cref="M:Junior.Common.CachedDelegate`2.Invoke(`0,System.Func{`1})"/> has never been called, the delegate will be invoked.
            </summary>
            <param name="key">A key.</param>
            <param name="delegate">A <see cref="T:System.Func`1"/>.</param>
            <returns>The result returneds by <paramref name="delegate"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Junior.Common.InvalidGenericTypeArgumentException">
            <summary>
            An exception thrown when a generic type argument is not supported by a method.
            </summary>
        </member>
        <member name="M:Junior.Common.InvalidGenericTypeArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.InvalidGenericTypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Junior.Common.InvalidGenericTypeArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.InvalidGenericTypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Junior.Common.InvalidGenericTypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.InvalidGenericTypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Junior.Common.InvalidGenericTypeArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.InvalidGenericTypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Junior.Common.InvalidGenericTypeArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.InvalidGenericTypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Junior.Common.InvalidGenericTypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.InvalidGenericTypeArgumentException"/> class.
            </summary>
        </member>
        <member name="T:Junior.Common.NullableCachedDelegate`2">
            <summary>
            Invokes a delegate only if a provided key is different than the last execution.
            </summary>
        </member>
        <member name="M:Junior.Common.NullableCachedDelegate`2.Invoke(`0,System.Func{`1})">
            <summary>
            Invokes <paramref name="delegate"/> only if <paramref name="key"/> is different than the last time <see cref="M:Junior.Common.NullableCachedDelegate`2.Invoke(`0,System.Func{`1})"/> was called.
            If <see cref="M:Junior.Common.NullableCachedDelegate`2.Invoke(`0,System.Func{`1})"/> has never been called, the delegate will be invoked.
            </summary>
            <param name="key">A key.</param>
            <param name="delegate">A <see cref="T:System.Func`1"/>.</param>
            <returns>The result returneds by <paramref name="delegate"/>.</returns>
        </member>
        <member name="T:Junior.Common.FloatToInt">
            <summary>
            Safely converts a <see cref="T:System.Single"/> to an <see cref="T:System.Int32"/> for floating-point comparisons.
            </summary>
        </member>
        <member name="M:Junior.Common.FloatToInt.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.FloatToInt"/> class.
            </summary>
            <param name="floatValue">The <see cref="T:System.Single"/> value to be converted to an <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="F:Junior.Common.FloatToInt.IntValue">
            <summary>
            Gets the floating-point value as an integer.
            </summary>
        </member>
        <member name="F:Junior.Common.FloatToInt.FloatValue">
            <summary>
            Gets the floating-point value.
            </summary>
        </member>
        <member name="M:Junior.Common.FloatToInt.Equals(Junior.Common.FloatToInt)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.FloatToInt.Equals(System.Single)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.FloatToInt.Equals(System.Int32)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.FloatToInt.CompareTo(Junior.Common.FloatToInt)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.FloatToInt.CompareTo(System.Single)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.FloatToInt.CompareTo(System.Int32)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.FloatToInt.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.FloatToInt.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.FloatToInt.op_Implicit(Junior.Common.FloatToInt)~System.Int32">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.FloatToInt"/> to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.FloatToInt"/>.</param>
            <returns>An integer representation of the floating-point value.</returns>
        </member>
        <member name="M:Junior.Common.FloatToInt.op_Implicit(Junior.Common.FloatToInt)~System.Single">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.FloatToInt"/> to a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.FloatToInt"/>.</param>
            <returns>The floating-point value.</returns>
        </member>
        <member name="M:Junior.Common.FloatToInt.op_Equality(Junior.Common.FloatToInt,Junior.Common.FloatToInt)">
            <summary>
            Determines if two <see cref="T:Junior.Common.FloatToInt"/> instances have the same integer representation.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.FloatToInt"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.FloatToInt"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.FloatToInt"/> have the same integer representation; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.FloatToInt.op_Inequality(Junior.Common.FloatToInt,Junior.Common.FloatToInt)">
            <summary>
            Determines if two <see cref="T:Junior.Common.FloatToInt"/> instances have different integer representations.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.FloatToInt"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.FloatToInt"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.FloatToInt"/> have different integer representations; otherwise, false.</returns>
        </member>
        <member name="T:Junior.Common.ResettableLazy`2">
            <summary>
            Encapsulates <see cref="T:System.Lazy`1"/>, allowing it to be reset.
            </summary>
            <typeparam name="TLazy">A <see cref="T:System.Lazy`1"/> or derived type.</typeparam>
            <typeparam name="TValue">The type of the value to be lazy-initialized.</typeparam>
        </member>
        <member name="M:Junior.Common.ResettableLazy`2.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.ResettableLazy`2"/> class.
            </summary>
            <param name="lazyFactory">A delegate used to initialize and reset the internal <typeparamref name="TLazy"/> instance</param>.
        </member>
        <member name="M:Junior.Common.ResettableLazy`2.Reset">
            <summary>
            Resets the internal <typeparamref name="TLazy"/> instance.
            </summary>
        </member>
        <member name="M:Junior.Common.ResettableLazy`2.op_Implicit(Junior.Common.ResettableLazy{`0,`1})~`0">
            <summary>
            Casts the current <see cref="T:Junior.Common.ResettableLazy`2"/> instance to <typeparamref name="TLazy"/>.
            </summary>
            <param name="resettableLazy">A <see cref="T:Junior.Common.ResettableLazy`2"/> instance.</param>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance.</returns>
        </member>
        <member name="P:Junior.Common.ResettableLazy`2.IsValueCreated">
            <summary>
            Gets a value that indicates whether a value has been created for the internal <typeparamref name="TLazy"/> instance.
            </summary>
        </member>
        <member name="P:Junior.Common.ResettableLazy`2.Value">
            <summary>
            Gets the lazily initialized value of the internal <typeparamref name="TLazy"/> instance.
            </summary>
        </member>
        <member name="T:Junior.Common.ResettableLazy">
            <summary>
            A factory that creates instances of <see cref="T:Junior.Common.ResettableLazy`2"/> using specific <see cref="T:System.Lazy`1"/> implementations.
            </summary>
        </member>
        <member name="M:Junior.Common.ResettableLazy.CreateUsingLazy``1">
            <summary>
            Creates a <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.
            </summary>
            <typeparam name="T">The type of the value to be lazy-initialized.</typeparam>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.</returns>
        </member>
        <member name="M:Junior.Common.ResettableLazy.CreateUsingLazy``1(System.Boolean)">
            <summary>
            Creates a <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.
            </summary>
            <typeparam name="T">The type of the value to be lazy-initialized.</typeparam>
            <param name="isThreadSafe">true to make this instance usable concurrently by multiple threads; false to make the instance usable by only one thread at a time.</param>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.</returns>
        </member>
        <member name="M:Junior.Common.ResettableLazy.CreateUsingLazy``1(System.Func{``0})">
            <summary>
            Creates a <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.
            </summary>
            <typeparam name="T">The type of the value to be lazy-initialized.</typeparam>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.</returns>
        </member>
        <member name="M:Junior.Common.ResettableLazy.CreateUsingLazy``1(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Creates a <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.
            </summary>
            <typeparam name="T">The type of the value to be lazy-initialized.</typeparam>
            <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.</returns>
        </member>
        <member name="M:Junior.Common.ResettableLazy.CreateUsingLazy``1(System.Func{``0},System.Boolean)">
            <summary>
            Creates a <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.
            </summary>
            <typeparam name="T">The type of the value to be lazy-initialized.</typeparam>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
            <param name="isThreadSafe">true to make this instance usable concurrently by multiple threads; false to make the instance usable by only one thread at a time.</param>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.</returns>
        </member>
        <member name="M:Junior.Common.ResettableLazy.CreateUsingLazy``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Creates a <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.
            </summary>
            <typeparam name="T">The type of the value to be lazy-initialized.</typeparam>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
            <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
            <returns>A <see cref="T:Junior.Common.ResettableLazy`2"/> instance that uses <see cref="T:System.Lazy`1"/> internally.</returns>
        </member>
        <member name="T:Junior.Common.StopwatchContext">
            <summary>
            Times how long it takes for a delegate to finish executing by using the <see cref="T:System.Diagnostics.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:Junior.Common.StopwatchContext.Timed(System.Action)">
            <summary>
            Times how long it takes for the specified delegate to finish executing.
            </summary>
            <param name="action">An <see cref="T:System.Action"/>.</param>
            <returns>The amount of time it took to execute <paramref name="action"/>.</returns>
        </member>
        <member name="T:Junior.Common.TaskFactoryExtensions">
            <summary>
            Extensions for the <see cref="T:System.Threading.Tasks.TaskFactory"/> and <see cref="T:System.Threading.Tasks.TaskFactory`1"/> types.
            </summary>
        </member>
        <member name="M:Junior.Common.TaskFactoryExtensions.Empty(System.Threading.Tasks.TaskFactory)">
            <summary>Retrieves a <see cref="T:System.Threading.Tasks.Task"/> with a null result.</summary>
            <param name="taskFactory">A task factory.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> whose result is null.</returns>
        </member>
        <member name="M:Junior.Common.TaskFactoryExtensions.Empty``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>Retrieves a <see cref="T:System.Threading.Tasks.Task`1"/> with a null result.</summary>
            <param name="taskFactory">A task factory.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> whose result is null.</returns>
        </member>
        <member name="M:Junior.Common.TaskFactoryExtensions.Empty``1(System.Threading.Tasks.TaskFactory{System.Nullable{``0}})">
            <summary>Retrieves a <see cref="T:System.Threading.Tasks.Task`1"/> with a null result.</summary>
            <param name="taskFactory">A task factory.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> whose result is null.</returns>
        </member>
        <member name="T:Junior.Common.UnitedStatesNineDigitPostalCode">
            <summary>
            A United States 9-digit postal code.
            </summary>
        </member>
        <member name="T:Junior.Common.PostalCode`1">
            <summary>
            A base class for all postal code implementations.
            </summary>
        </member>
        <member name="M:Junior.Common.PostalCode`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PostalCode`1"/> class.
            </summary>
            <param name="postalCode">A postal code represented as a string.</param>
            <param name="regexPattern">A regular expression pattern for validating <paramref name="postalCode"/>.</param>
            <param name="argumentExceptionMessage">An exception message used if the <paramref name="postalCode"/> is invalid.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="postalCode"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="postalCode"/> does not match <paramref name="regexPattern"/>.</exception>
        </member>
        <member name="M:Junior.Common.PostalCode`1.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PostalCode`1"/> class.
            </summary>
            <param name="postalCode">A postal code represented as an <see cref="T:System.Int32"/>.</param>
            <param name="regexPattern">A regular expression pattern for validating <paramref name="postalCode"/>.</param>
            <param name="argumentExceptionMessage">An exception message used if the <paramref name="postalCode"/> is invalid.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="postalCode"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="postalCode"/> does not match <paramref name="regexPattern"/>.</exception>
        </member>
        <member name="M:Junior.Common.PostalCode`1.CompareTo(Junior.Common.PostalCode{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PostalCode`1.Equals(Junior.Common.PostalCode{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PostalCode`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.PostalCode`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.PostalCode`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Equality(Junior.Common.PostalCode{`0},Junior.Common.PostalCode{`0})">
            <summary>
            Determines if two <see cref="T:Junior.Common.PostalCode`1"/> instances represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.PostalCode`1"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Equality(Junior.Common.PostalCode{`0},System.String)">
            <summary>
            Determines if a <see cref="T:Junior.Common.PostalCode`1"/> instance and a <see cref="T:System.String"/> represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <param name="right">A <see cref="T:System.String"/>.</param>
            <returns>true if the <see cref="T:Junior.Common.PostalCode`1"/> instance and the <see cref="T:System.String"/> are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Equality(System.String,Junior.Common.PostalCode{`0})">
            <summary>
            Determines if a <see cref="T:System.String"/> and a <see cref="T:Junior.Common.PostalCode`1"/> instance represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:System.String"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>true if the <see cref="T:System.String"/> and the <see cref="T:Junior.Common.PostalCode`1"/> instance are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Equality(Junior.Common.PostalCode{`0},System.Int32)">
            <summary>
            Determines if a <see cref="T:Junior.Common.PostalCode`1"/> instance and an <see cref="T:System.Int32"/> represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <param name="right">A number.</param>
            <returns>true if the <see cref="T:Junior.Common.PostalCode`1"/> instance and the number are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Equality(System.Int32,Junior.Common.PostalCode{`0})">
            <summary>
            Determines if an <see cref="T:System.Int32"/> and a <see cref="T:Junior.Common.PostalCode`1"/> instance represent the same postal code.
            </summary>
            <param name="left">A number.</param>
            <param name="right">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>true if the number and the <see cref="T:Junior.Common.PostalCode`1"/> instance are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Inequality(Junior.Common.PostalCode{`0},Junior.Common.PostalCode{`0})">
            <summary>
            Determines if two <see cref="T:Junior.Common.PostalCode`1"/> instances do not represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.PostalCode`1"/> instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Inequality(Junior.Common.PostalCode{`0},System.String)">
            <summary>
            Determines if a <see cref="T:Junior.Common.PostalCode`1"/> instance and a <see cref="T:System.String"/> do not represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <param name="right">A <see cref="T:System.String"/>.</param>
            <returns>true if the <see cref="T:Junior.Common.PostalCode`1"/> instance and the <see cref="T:System.String"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Inequality(System.String,Junior.Common.PostalCode{`0})">
            <summary>
            Determines if a <see cref="T:System.String"/> and a <see cref="T:Junior.Common.PostalCode`1"/> instance do not represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:System.String"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>true if the <see cref="T:System.String"/> and the <see cref="T:Junior.Common.PostalCode`1"/> instance are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Inequality(Junior.Common.PostalCode{`0},System.Int32)">
            <summary>
            Determines if a <see cref="T:Junior.Common.PostalCode`1"/> instance and an <see cref="T:System.Int32"/> do not represent the same postal code.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <param name="right">A number.</param>
            <returns>true if the <see cref="T:Junior.Common.PostalCode`1"/> instance and the number are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Inequality(System.Int32,Junior.Common.PostalCode{`0})">
            <summary>
            Determines if an <see cref="T:System.Int32"/> and a <see cref="T:Junior.Common.PostalCode`1"/> instance do not represent the same postal code.
            </summary>
            <param name="left">A number.</param>
            <param name="right">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>true if the number and the <see cref="T:Junior.Common.PostalCode`1"/> instance are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Implicit(Junior.Common.PostalCode{`0})~System.String">
            <summary>
            Implicitly converts from an <see cref="T:Junior.Common.PostalCode`1"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>A <see cref="T:System.String"/> representing the specified <see cref="T:Junior.Common.PostalCode`1"/>.</returns>
        </member>
        <member name="M:Junior.Common.PostalCode`1.op_Implicit(Junior.Common.PostalCode{`0})~System.Int32">
            <summary>
            Implicitly converts from an <see cref="T:Junior.Common.PostalCode`1"/> to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.PostalCode`1"/>.</param>
            <returns>A number representing the specified <see cref="T:Junior.Common.PostalCode`1"/>.</returns>
        </member>
        <member name="F:Junior.Common.UnitedStatesNineDigitPostalCode.RegexPattern">
            <summary>
            The regular expression pattern used by <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.UnitedStatesNineDigitPostalCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/> class.
            </summary>
            <param name="postalCode">A postal code.</param>
        </member>
        <member name="M:Junior.Common.UnitedStatesNineDigitPostalCode.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/> class.
            </summary>
            <param name="postalCode">A postal code.</param>
        </member>
        <member name="M:Junior.Common.UnitedStatesNineDigitPostalCode.Parse(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/>.
            </summary>
            <param name="value">A postal code.</param>
            <returns><paramref name="value"/> as a <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.UnitedStatesNineDigitPostalCode.TryParse(System.String,Junior.Common.UnitedStatesNineDigitPostalCode@)">
            <summary>
            Attempts to parse the specified string into a <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/>.
            </summary>
            <param name="value">A postal code.</param>
            <param name="result">A <see cref="T:Junior.Common.UnitedStatesNineDigitPostalCode"/> representing the specified postal code if <paramref name="value"/> is valid; otherwise, null.</param>
            <returns>true if the value was successfully parsed; otherwise, false.</returns>
        </member>
        <member name="T:Junior.Common.Enum`1">
            <summary>
            Generic wrapper for several <see cref="T:System.Enum"/> methods.
            </summary>
            <typeparam name="T">An enum type.</typeparam>
        </member>
        <member name="M:Junior.Common.Enum`1.GetName``1(``0)">
            <summary>
            Retrieves the name of the constant in the <typeparamref name="T"/> that has the specified value.
            </summary>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <returns>A <see cref="T:System.String"/> containing the name of the enumerated constant in <typeparamref name="T"/> whose value is <paramref name="value"/>; or null if no such constant is found.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.GetNames">
            <summary>
            Retrieves an enumerable of the names of the constants in a specified enumeration.
            </summary>
            <returns>An enumerable of the names of the constants in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.GetUnderlyingType">
            <summary>
            Retrieves the underlying type of <typeparamref name="T"/>.
            </summary>
            <returns>The underlying type of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.GetValues">
            <summary>
            Retrieves an enumerable of the values of the constants in <typeparamref name="T"/>.
            </summary>
            <returns>An enumerable that contains the values of the constants in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.IsDefined``1(``0)">
            <summary>
            Indicates whether a constant with a specified value exists in <typeparamref name="T"/>.
            </summary>
            <param name="value">The value or name of a constant in <typeparamref name="T"/>.</param>
            <returns>true if a constant in <typeparamref name="T"/> has a value equal to <paramref name="value"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.
            </summary>
            <param name="value">A <see cref="T:System.String"/> containing the name or value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>An object of type <typeparamref name="T"/> whose value is represented by <paramref name="value"/>.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.ToObject``1(``0)">
            <summary>
            Converts the specified object with an integer value to an enumeration member.
            </summary>
            <param name="value">The value convert to an enumeration member.</param>
            <returns>An enumeration object whose value is <paramref name="value"/>.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.TryParse(System.String,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The <see cref="T:System.String"/> representation of the enumeration name or underlying value to convert.</param>
            <param name="result">When this method returns, contains an object of type <typeparamref name="T"/> whose value is represented by <paramref name="value"/>. This parameter is passed uninitialized.</param>
            <returns>true if the <paramref name="value"/> parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.Enum`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The <see cref="T:System.String"/> representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <param name="result">When this method returns, contains an object of type <typeparamref name="T"/> whose value is represented by <paramref name="value"/>. This parameter is passed uninitialized.</param>
            <returns>true if the <paramref name="value"/> parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="T:Junior.Common.EnumerableSynchronizer`1">
            <summary>
            Determines which elements in an initial enumerable have been removed, added or are common in a desired enumerable.
                <see cref="T:Junior.Common.EnumerableSynchronizer`1"/> forces elements have the same type.
            </summary>
        </member>
        <member name="T:Junior.Common.EnumerableSynchronizer`2">
            <summary>
            Determines which elements in an initial enumerable have been removed, added or are common in a desired enumerable.
            </summary>
        </member>
        <member name="M:Junior.Common.EnumerableSynchronizer`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.EnumerableSynchronizer`2"/> class.
            </summary>
            <param name="initialState">The initial enumerable.</param>
            <param name="desiredState">The desired enumerable.</param>
        </member>
        <member name="M:Junior.Common.EnumerableSynchronizer`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Func{`0,`1,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.EnumerableSynchronizer`2"/> class.
            </summary>
            <param name="initialState">The initial enumerable.</param>
            <param name="desiredState">The desired enumerable.</param>
            <param name="equalityDelegate">A delegate used to determine the equality of an initial state element and a desired state element.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="initialState"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="desiredState"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="equalityDelegate"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.EnumerableSynchronizer`2.Synchronize(System.Action{`1},System.Action{`0},System.Action{`1})">
            <summary>
            Invokes the specified delegates for each type of element.
            </summary>
            <param name="addedElementDelegate">An <see cref="T:System.Action`1"/> that will be invoked for each added element, or null to not invoke a delegate.</param>
            <param name="removedElementDelegate">An <see cref="T:System.Action`1"/> that will be invoked for each removed element, or null to not invoke a delegate.</param>
            <param name="commonElementDelegate">An <see cref="T:System.Action`1"/> that will be invoked for each common element, or null to not invoke a delegate.</param>
        </member>
        <member name="P:Junior.Common.EnumerableSynchronizer`2.EnumerablesContainSameElements">
            <summary>
            Determines if the initial state enumerable and the desired state enumerable contain the same elements.
            </summary>
        </member>
        <member name="P:Junior.Common.EnumerableSynchronizer`2.RemovedElements">
            <summary>
            Gets the elements removed from the initial state enumerable.
            </summary>
        </member>
        <member name="P:Junior.Common.EnumerableSynchronizer`2.CommonElements">
            <summary>
            Gets the elements common to the initial state enumerable and the desired state enumerable.
            </summary>
        </member>
        <member name="P:Junior.Common.EnumerableSynchronizer`2.AddedElements">
            <summary>
            Gets the elements in the desired state enumerable that do not exist in the initial state enumerable.
            </summary>
        </member>
        <member name="M:Junior.Common.EnumerableSynchronizer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.EnumerableSynchronizer`1"/> class.
            </summary>
            <param name="initialState">The initial enumerable.</param>
            <param name="desiredState">The desired enumerable.</param>
        </member>
        <member name="M:Junior.Common.EnumerableSynchronizer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.EnumerableSynchronizer`1"/> class.
            </summary>
            <param name="initialState">The initial enumerable.</param>
            <param name="desiredState">The desired enumerable.</param>
            <param name="equalityDelegate">A delegate used to determine the equality of an initial state element and a desired state element.</param>
        </member>
        <member name="T:Junior.Common.ComparerExtensions">
            <summary>
            Extensions for the <see cref="T:System.Collections.Generic.IComparer`1"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.ComparerExtensions.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Reverses a comparison result.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/>.</param>
            <returns>The negative of the comparison result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="T:Junior.Common.ComparerReverser`1">
            <summary>
            Reverses a comparison result.
            </summary>
        </member>
        <member name="M:Junior.Common.ComparerReverser`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.ComparerReverser`1"/> class.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.ComparerReverser`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:Junior.Common.Context`1">
            <summary>
            A nestable per-process context. Contexts must always be disposed when they are exited to ensure proper behavior.
            </summary>
        </member>
        <member name="M:Junior.Common.Context`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Context`1"/> class. The new instance becomes the current context.
            </summary>
        </member>
        <member name="M:Junior.Common.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.Context`1.Dispose(System.Boolean)">
            <summary>
            The next outer scope in the process becomes the current context.
            </summary>
            <param name="disposing">When true, the next outer scope in the process becomes the current context; otherwise, a null operation.</param>
        </member>
        <member name="P:Junior.Common.Context`1.Current">
            <summary>
            Gets the current context value.
            </summary>
        </member>
        <member name="P:Junior.Common.Context`1.Disposed">
            <summary>
            Gets a value indicating if the context is disposed.
            </summary>
        </member>
        <member name="T:Junior.Common.DictionaryExtensions">
            <summary>
            Extensions for the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.DictionaryExtensions.AddMany``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds an enumerable of entries to the specified dictionary.
            </summary>
            <param name="dictionary">A <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="pairs">An enumerable of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="pairs"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.DictionaryExtensions.ReplaceMany``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds or replaces an enumerable of entries in the specified dictionary.
            </summary>
            <param name="dictionary">A <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="pairs">An enumerable of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add or replace.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="pairs"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.DictionaryExtensions.RemoveMany``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes entries with the specified keys from the specified dictionary.
            </summary>
            <param name="dictionary">A <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="keys">An enumerable of keys to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="keys"/> is null.</exception>
        </member>
        <member name="T:Junior.Common.DisposableExtensions">
            <summary>
            Extensions for the <see cref="T:System.IDisposable"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.DisposableExtensions.ThrowIfDisposed(System.IDisposable,System.Boolean)">
            <summary>
            Throws an exception if <paramref name="disposed"/> is true.
            </summary>
            <param name="object">An object.</param>
            <param name="disposed">A value indicating if <paramref name="object"/> is disposed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="object"/> is null.</exception>
        </member>
        <member name="T:Junior.Common.EnumExtensions">
            <summary>
            Extensions for enumerations.
            </summary>
        </member>
        <member name="M:Junior.Common.EnumExtensions.HasFlag``1(``0,``0)">
            <summary>
            Determines if the specified flag is present in the specified enumeration value.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:System.Enum"/>.</typeparam>
            <param name="enum">An enumeration value.</param>
            <param name="flag">The enumeration value to check for.</param>
            <returns>true if <paramref name="flag"/> exists in <paramref name="enum"/>; otherwise, false.</returns>
            <exception cref="T:Junior.Common.InvalidGenericTypeArgumentException">Thrown when <typeparamref name="T"/> is not an enumeration type.</exception>
        </member>
        <member name="T:Junior.Common.IImmutableBinaryTreeNode`2">
            <summary>
            Represents an immutable node in a binary tree. <see cref="T:Junior.Common.IImmutableBinaryTreeNode`2"/> allows the consumer to specify
            the actual node type and the type of value nodes contain.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Value">
            <summary>
            Gets or sets the current node's value.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.LeftDescendant">
            <summary>
            Gets or sets the left descendant node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.RightDescendant">
            <summary>
            Gets or sets the right descendant node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Ancestor">
            <summary>
            Gets the ancestor node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Ancestors">
            <summary>
            Gets all ancestor nodes of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.CurrentPlusAncestors">
            <summary>
            Gets all ancestor nodes of the current node, including the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Descendants">
            <summary>
            Gets all descendant nodes of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.CurrentPlusDescendants">
            <summary>
            Gets all descendant nodes of the current node, including the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Sibling">
            <summary>
            Gets the sibling node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.CurrentPlusSibling">
            <summary>
            Gets the sibling node of the current node, including the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.LeavesFromRoot">
            <summary>
            Gets all leaf nodes from the root.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.LeavesFromCurrent">
            <summary>
            Gets all leaf nodes from the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Depth">
            <summary>
            Gets the depth of the current node. The root node is always depth 0.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Height">
            <summary>
            Gets the deepest depth for all nodes in the tree.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.Size">
            <summary>
            Gets a count of descendant nodes from the current node, plus the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.IsRoot">
            <summary>
            Determines if the current node is the root node. A root node has no ancestor.
            </summary>
        </member>
        <member name="P:Junior.Common.IImmutableBinaryTreeNode`2.IsLeaf">
            <summary>
            Determines if the current node is a leaf node. A leaf node has no descendants.
            </summary>
        </member>
        <member name="T:Junior.Common.SortedDictionaryExtensions">
            <summary>
            Extensions for the <see cref="T:System.Collections.Generic.SortedDictionary`2"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.SortedDictionaryExtensions.AddMany``2(System.Collections.Generic.SortedDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds an enumerable of entries to the specified sorted dictionary.
            </summary>
            <param name="sortedDictionary">A <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.</param>
            <param name="pairs">An enumerable of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sortedDictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="pairs"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.SortedDictionaryExtensions.ReplaceMany``2(System.Collections.Generic.SortedDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds or replaces an enumerable of entries in the specified sorted dictionary.
            </summary>
            <param name="sortedDictionary">A <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.</param>
            <param name="pairs">An enumerable of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add or replace.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sortedDictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="pairs"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.SortedDictionaryExtensions.RemoveMany``2(System.Collections.Generic.SortedDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes entries with the specified keys from the specified sorted dictionary.
            </summary>
            <param name="sortedDictionary">A <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.</param>
            <param name="keys">An enumerable of keys to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sortedDictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="keys"/> is null.</exception>
        </member>
        <member name="T:Junior.Common.ThreadLocalContext`1">
            <summary>
            A nestable per-thread context. Contexts must always be disposed when they are exited to ensure proper behavior.
            </summary>
        </member>
        <member name="M:Junior.Common.ThreadLocalContext`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Context`1"/> class. The new instance becomes the current context on the current thread.
            </summary>
        </member>
        <member name="M:Junior.Common.ThreadLocalContext`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.ThreadLocalContext`1.Dispose(System.Boolean)">
            <summary>
            The next outer scope on the current thread becomes the current context.
            </summary>
            <param name="disposing">When true, the next outer scope on the current thread becomes the current context; otherwise, a null operation.</param>
        </member>
        <member name="P:Junior.Common.ThreadLocalContext`1.Current">
            <summary>
            Gets the current context value.
            </summary>
        </member>
        <member name="P:Junior.Common.ThreadLocalContext`1.Disposed">
            <summary>
            Gets a value indicating if the context is disposed.
            </summary>
        </member>
        <member name="T:Junior.Common.Ranges.NullableStartGreaterThanEndRange`1">
            <summary>
            A range of nullable <typeparamref name="T"/> where the start must be greater than the end.
            </summary>
        </member>
        <member name="T:Junior.Common.Ranges.Range`1">
            <summary>
            A range of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.Range`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
        </member>
        <member name="P:Junior.Common.Ranges.Range`1.Start">
            <summary>
            Gets the start of the range.
            </summary>
        </member>
        <member name="P:Junior.Common.Ranges.Range`1.End">
            <summary>
            Gets the end of the range.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.NullableStartGreaterThanEndRange`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.NullableStartGreaterThanEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is less than or equal to <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.Ranges.NullableStartGreaterThanOrEqualToEndRange`1">
            <summary>
            A range of nullable <typeparamref name="T"/> where the start must be greater than or equal to the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.NullableStartGreaterThanOrEqualToEndRange`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.NullableStartGreaterThanOrEqualToEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is less than <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.Ranges.NullableStartLessThanEndRange`1">
            <summary>
            A range of nullable <typeparamref name="T"/> where the start must be less than the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.NullableStartLessThanEndRange`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.NullableStartLessThanEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is greater than or equal to <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.Ranges.NullableStartLessThanOrEqualToEndRange`1">
            <summary>
            A range of nullable <typeparamref name="T"/> where the start must be less than or equal to the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.NullableStartLessThanOrEqualToEndRange`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.NullableStartLessThanOrEqualToEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is greater than <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.Ranges.StartLessThanEndRange`1">
            <summary>
            A range of <typeparamref name="T"/> where the start must be less than the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.StartLessThanEndRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.StartLessThanEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is greater than or equal to <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.DateTimeExtensions">
            <summary>
            Extensions for the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.DateTimeExtensions.AsLocal(System.DateTime)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> into a local time. The actual date and time will remain unchanged.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/>.</param>
            <returns><paramref name="dateTime"/> as a local time.</returns>
        </member>
        <member name="M:Junior.Common.DateTimeExtensions.AsUtc(System.DateTime)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> into UTC time. The actual date and time will remain unchanged.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/>.</param>
            <returns><paramref name="dateTime"/> as UTC time.</returns>
        </member>
        <member name="M:Junior.Common.DateTimeExtensions.AsUnspecified(System.DateTime)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> into an unspecified kind of time. The actual date and time will remain unchanged.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/>.</param>
            <returns><paramref name="dateTime"/> as an unspecified kind of time.</returns>
        </member>
        <member name="M:Junior.Common.DateTimeExtensions.AsKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> into a specific kind of time. The actual date and time will remain unchanged.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/>.</param>
            <param name="kind">A <see cref="T:System.DateTimeKind"/>.</param>
            <returns><paramref name="dateTime"/> as a <paramref name="kind"/> of time.</returns>
        </member>
        <member name="T:Junior.Common.EmailAddress">
            <summary>
            An email address. <see cref="T:Junior.Common.EmailAddress"/> allows email addresses of any length.
            </summary>
        </member>
        <member name="F:Junior.Common.EmailAddress.RegexPattern">
            <summary>
            The regular expression pattern used by <see cref="T:Junior.Common.EmailAddress"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.EmailAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.EmailAddress"/> class.
            </summary>
            <param name="emailAddress">An email address.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="emailAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="emailAddress"/> is not a valid email address.</exception>
        </member>
        <member name="M:Junior.Common.EmailAddress.CompareTo(Junior.Common.EmailAddress)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.EmailAddress.Equals(Junior.Common.EmailAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.EmailAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.EmailAddress.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.EmailAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.EmailAddress.Parse(System.String)">
            <summary>
            Parses <paramref name="value"/> to an <see cref="T:Junior.Common.EmailAddress"/>.
            </summary>
            <param name="value">An email address.</param>
            <returns>An <see cref="T:Junior.Common.EmailAddress"/> representing the specified email address.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.EmailAddress.TryParse(System.String,Junior.Common.EmailAddress@)">
            <summary>
            Attempts to parse <paramref name="value"/> to an <see cref="T:Junior.Common.EmailAddress"/>.
            </summary>
            <param name="value">An email address.</param>
            <param name="result">An <see cref="T:Junior.Common.EmailAddress"/> representing the specified email address if <paramref name="value"/> is valid; otherwise, null.</param>
            <returns>true if <paramref name="value"/> is a valid email address; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Equality(Junior.Common.EmailAddress,Junior.Common.EmailAddress)">
            <summary>
            Determines if two <see cref="T:Junior.Common.EmailAddress"/> instances represent the same email address.
            </summary>
            <param name="left">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <param name="right">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.EmailAddress"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Equality(Junior.Common.EmailAddress,System.String)">
            <summary>
            Determines if an <see cref="T:Junior.Common.EmailAddress"/> instance and a <see cref="T:System.String"/> represent the same email address.
            </summary>
            <param name="left">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <param name="right">An email address.</param>
            <returns>true if the <see cref="T:Junior.Common.EmailAddress"/> instance and the <see cref="T:System.String"/> are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Equality(System.String,Junior.Common.EmailAddress)">
            <summary>
            Determines if a <see cref="T:System.String"/> and an <see cref="T:Junior.Common.EmailAddress"/> instance represent the same email address.
            </summary>
            <param name="left">An email address.</param>
            <param name="right">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <returns>true if the <see cref="T:System.String"/> and the <see cref="T:Junior.Common.EmailAddress"/> instance are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Inequality(Junior.Common.EmailAddress,Junior.Common.EmailAddress)">
            <summary>
            Determines if two <see cref="T:Junior.Common.EmailAddress"/> instances do not represent the same email address.
            </summary>
            <param name="left">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <param name="right">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.EmailAddress"/> instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Inequality(Junior.Common.EmailAddress,System.String)">
            <summary>
            Determines if an <see cref="T:Junior.Common.EmailAddress"/> instance and a <see cref="T:System.String"/> do not represent the same email address.
            </summary>
            <param name="left">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <param name="right">An email address.</param>
            <returns>true if the <see cref="T:Junior.Common.EmailAddress"/> instance and the <see cref="T:System.String"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Inequality(System.String,Junior.Common.EmailAddress)">
            <summary>
            Determines if a <see cref="T:System.String"/> and an <see cref="T:Junior.Common.EmailAddress"/> instance do not represent the same email address.
            </summary>
            <param name="left">An email address.</param>
            <param name="right">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <returns>true if the <see cref="T:System.String"/> and the <see cref="T:Junior.Common.EmailAddress"/> instance are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EmailAddress.op_Implicit(Junior.Common.EmailAddress)~System.String">
            <summary>
            Implicitly converts <paramref name="value"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">An <see cref="T:Junior.Common.EmailAddress"/>.</param>
            <returns>An email address as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Junior.Common.EnumerableExtensions">
            <summary>
            Extensions for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Retrieves the element in the specified enumerable with the minimum value as determined by the specified delegate.
            The default comparer for <typeparamref name="TKey"/> is used.
            </summary>
            <param name="source">An enumerable of <typeparamref name="TSource"/>.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> used to retrieve the comparison value.</param>
            <returns>The element in the specified enumerable with the minimum value as determined by the specified delegate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Retrieves the element in the specified enumerable with the minimum value as determined by the specified delegate.
            </summary>
            <param name="source">An enumerable of <typeparamref name="TSource"/>.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> used to retrieve the comparison value.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/>.</param>
            <returns>The element in the specified enumerable with the minimum value as determined by the specified delegate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="comparer"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Retrieves the element in the specified enumerable with the maximum value as determined by the specified delegate.
            The default comparer for <typeparamref name="TKey"/> is used.
            </summary>
            <param name="source">An enumerable of <typeparamref name="TSource"/>.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> used to retrieve the comparison value.</param>
            <returns>The element in the specified enumerable with the maximum value as determined by the specified delegate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Retrieves the element in the specified enumerable with the maximum value as determined by the specified delegate.
            </summary>
            <param name="source">An enumerable of <typeparamref name="TSource"/>.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> used to retrieve the comparison value.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/>.</param>
            <returns>The element in the specified enumerable with the maximum value as determined by the specified delegate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="comparer"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.CountLessThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the number of elements in the specified enumerable is less than the specified count.
            <see cref="M:Junior.Common.EnumerableExtensions.CountLessThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> uses an enumerator to only retrieve as many values as necessary to make the determination.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="elementCount">A count of elements.</param>
            <returns>true if the number of elements in <paramref name="source"/> is less than <paramref name="elementCount"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.CountLessThanOrEqual``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the number of elements in the specified enumerable is less than or equal to the specified count.
            <see cref="M:Junior.Common.EnumerableExtensions.CountLessThanOrEqual``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> uses an enumerator to only retrieve as many values as necessary to make the determination.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="elementCount">A count of elements.</param>
            <returns>true if the number of elements in <paramref name="source"/> is less than or equal to <paramref name="elementCount"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.CountEqual``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the number of elements in the specified enumerable is equal to the specified count.
            <see cref="M:Junior.Common.EnumerableExtensions.CountEqual``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> uses an enumerator to only retrieve as many values as necessary to make the determination.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="elementCount">A count of elements.</param>
            <returns>true if the number of elements in <paramref name="source"/> is equal to <paramref name="elementCount"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.CountGreaterThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the number of elements in the specified enumerable is greater than the specified count.
            <see cref="M:Junior.Common.EnumerableExtensions.CountGreaterThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> uses an enumerator to only retrieve as many values as necessary to make the determination.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="elementCount">A count of elements.</param>
            <returns>true if the number of elements in <paramref name="source"/> is greater than <paramref name="elementCount"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.CountGreaterThanOrEqual``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the number of elements in the specified enumerable is greater than or equal to the specified count.
            <see cref="M:Junior.Common.EnumerableExtensions.CountGreaterThanOrEqual``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> uses an enumerator to only retrieve as many values as necessary to make the determination.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="elementCount">A count of elements.</param>
            <returns>true if the number of elements in <paramref name="source"/> is greater than or equal to <paramref name="elementCount"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.EmptyToNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an empty enumerable to null.
            </summary>
            <param name="source">An enumerable.</param>
            <returns>null if <paramref name="source"/> is empty; otherwise, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Junior.Common.EnumerableExtensions.NullToEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an null enumerable to an empty one.
            </summary>
            <param name="source">An enumerable.</param>
            <returns>empty if <paramref name="source"/> is null; otherwise, <paramref name="source"/>.</returns>
        </member>
        <member name="T:Junior.Common.GuidFactory">
            <summary>
            Retrieves random GUIDs. Currently, <see cref="T:Junior.Common.GuidFactory"/> simply returns <see cref="M:System.Guid.NewGuid"/>.
            </summary>
        </member>
        <member name="T:Junior.Common.IGuidFactory">
            <summary>
            Represents a way to retrieve random GUIDs.
            </summary>
        </member>
        <member name="M:Junior.Common.IGuidFactory.Random">
            <summary>
            Retrieves a random GUID.
            </summary>
            <returns>A random GUID.</returns>
        </member>
        <member name="M:Junior.Common.GuidFactory.Random">
            <summary>
            Retrieves a random GUID.
            </summary>
            <returns>A random GUID.</returns>
        </member>
        <member name="T:Junior.Common.IPairMapper`2">
            <summary>
            Represents a way to map between two values.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.Map(`0)">
            <summary>
            Maps the specified first value to its matching second value.
            </summary>
            <param name="first">A value.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.Map(`0,`1)">
            <summary>
            Maps the specified first value to its matching second value, or <paramref name="defaultValue"/> if no matching <paramref name="first"/> was found.
            </summary>
            <param name="first">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="first"/> is not found.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.MapFirst(`0)">
            <summary>
            Maps the specified first value to its matching second value.
            </summary>
            <param name="first">A value.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.MapFirst(`0,`1)">
            <summary>
            Maps the specified first value to its matching second value, or <paramref name="defaultValue"/> if no matching <paramref name="first"/> was found.
            </summary>
            <param name="first">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="first"/> is not found.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.Map(`1)">
            <summary>
            Maps the specified second value to its matching first value.
            </summary>
            <param name="second">A value.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.Map(`1,`1)">
            <summary>
            Maps the specified second value to its matching first value, or <paramref name="defaultValue"/> if no matching <paramref name="second"/> was found.
            </summary>
            <param name="second">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="second"/> is not found.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.MapSecond(`1)">
            <summary>
            Maps the specified second value to its matching first value.
            </summary>
            <param name="second">A value.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.MapSecond(`1,`1)">
            <summary>
            Maps the specified second value to its matching first value, or <paramref name="defaultValue"/> if no matching <paramref name="second"/> was found.
            </summary>
            <param name="second">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="second"/> is not found.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.IPairMapper`2.Add(`0,`1)">
            <summary>
            Adds a new pair to the pair mapper.
            </summary>
            <param name="first">A value.</param>
            <param name="second">A value.</param>
        </member>
        <member name="T:Junior.Common.ISystemClock">
            <summary>
            Represents the current system date and time in both local time and UTC time.
            </summary>
        </member>
        <member name="P:Junior.Common.ISystemClock.LocalDate">
            <summary>
            Gets the current local date.
            </summary>
        </member>
        <member name="P:Junior.Common.ISystemClock.LocalDateTime">
            <summary>
            Gets the current local date and time.
            </summary>
        </member>
        <member name="P:Junior.Common.ISystemClock.LocalTime">
            <summary>
            Gets the current local time.
            </summary>
        </member>
        <member name="P:Junior.Common.ISystemClock.UtcDate">
            <summary>
            Gets the current UTC date.
            </summary>
        </member>
        <member name="P:Junior.Common.ISystemClock.UtcDateTime">
            <summary>
            Gets the current UTC date and time.
            </summary>
        </member>
        <member name="P:Junior.Common.ISystemClock.UtcTime">
            <summary>
            Gets the current UTC time.
            </summary>
        </member>
        <member name="T:Junior.Common.Md5String">
            <summary>
            Compares and converts MD5 strings.
            </summary>
        </member>
        <member name="F:Junior.Common.Md5String.HyphenatedRegexPattern">
            <summary>
            The regular expression pattern used by <see cref="T:Junior.Common.EmailAddress"/> to validate hyphenated MD5 strings.
            </summary>
        </member>
        <member name="F:Junior.Common.Md5String.NonHyphenatedRegexPattern">
            <summary>
            The regular expression pattern used by <see cref="T:Junior.Common.EmailAddress"/> to validate non-hyphenated MD5 strings.
            </summary>
        </member>
        <member name="F:Junior.Common.Md5String.OptionallyHyphenatedRegexPattern">
            <summary>
            The regular expression pattern used by <see cref="T:Junior.Common.EmailAddress"/> to validate hyphenated and non-hyphenated MD5 strings.
            </summary>
        </member>
        <member name="M:Junior.Common.Md5String.CompareTo(Junior.Common.Md5String)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.Md5String.Equals(Junior.Common.Md5String)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.Md5String.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.Md5String.FromNonHashed(System.String)">
            <summary>
            Hashes the specified value and returns an <see cref="T:Junior.Common.Md5String"/>.
            </summary>
            <param name="value">A value to hash.</param>
            <returns>an <see cref="T:Junior.Common.Md5String"/> containing the hashed value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.Md5String.FromMd5(System.String,Junior.Common.Md5StringFormat)">
            <summary>
            Validates the specified MD5 string and returns an <see cref="T:Junior.Common.Md5String"/>.
            </summary>
            <param name="value">An MD5 string.</param>
            <param name="format">The allowed formats for <paramref name="value"/>.</param>
            <returns>an <see cref="T:Junior.Common.Md5String"/> containing <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> does not validate against <paramref name="format"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="format"/> has an unexpected value.</exception>
        </member>
        <member name="M:Junior.Common.Md5String.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.Md5String.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.Md5String.IsMd5String(System.String)">
            <summary>
            Determines if the specified string is a valid MD5 string.
            </summary>
            <param name="value">A value.</param>
            <returns>true if <paramref name="value"/> is an MD5 string; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.Md5String.op_Equality(Junior.Common.Md5String,Junior.Common.Md5String)">
            <summary>
            Determines if two <see cref="T:Junior.Common.Md5String"/> instances represent the same MD5 string.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.Md5String"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.Md5String"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.Md5String"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.Md5String.op_Inequality(Junior.Common.Md5String,Junior.Common.Md5String)">
            <summary>
            Determines if two <see cref="T:Junior.Common.Md5String"/> instances do not represent the same MD5 string.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.Md5String"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.Md5String"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.Md5String"/> instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.Md5String.op_Implicit(Junior.Common.Md5String)~System.String">
            <summary>
            Implicitly converts from an <see cref="T:Junior.Common.Md5String"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">An <see cref="T:Junior.Common.Md5String"/>.</param>
            <returns>A <see cref="T:System.String"/> representing the specified <see cref="T:Junior.Common.Md5String"/>.</returns>
        </member>
        <member name="T:Junior.Common.Md5StringFormat">
            <summary>
            MD5 string formats.
            </summary>
        </member>
        <member name="F:Junior.Common.Md5StringFormat.NonHyphenatedHexCharacters">
            <summary>
            Non-hyphenated hexadecimal characters.
            </summary>
        </member>
        <member name="F:Junior.Common.Md5StringFormat.HyphenatedHexCharacters">
            <summary>
            Hyphenated hexadecimal characters.
            </summary>
        </member>
        <member name="F:Junior.Common.Md5StringFormat.OptionallyHyphenatedHexCharacters">
            <summary>
            Hyphenated and non-hyphenated hexadecimal characters.
            </summary>
        </member>
        <member name="T:Junior.Common.ObjectExtensions">
            <summary>
            Extensions for the <see cref="T:System.Object"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.Convert``1(System.Object)">
            <summary>
            Converts the specified value to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">A value.</param>
            <returns><paramref name="value"/> as <see cref="T:System.Nullable`1"/> if the conversion succeeded; otherwise, null.</returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.Convert``1(System.Object,``0)">
            <summary>
            Converts the specified value to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">A value.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns><paramref name="value"/> as <see cref="T:System.Nullable`1"/> if the conversion succeeded; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.TryConvert``1(System.Object,``0@)">
            <summary>
            Attempts to convert the specified value to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">A value.</param>
            <param name="result">The converted value, if conversion succeeded; otherwise, default(<typeparamref name="T"/>).</param>
            <returns>true if conversion succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.CanConvert``1(System.Object)">
            <summary>
            Determines if the specified value can be converted to <typeparamref name="T"/>.
            </summary>
            <param name="value">A value.</param>
            <returns>true if <paramref name="value"/> can be converted to <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.CanConvert(System.Object,System.Type)">
            <summary>
            Determines if the specified value can be converted to the specified type.
            </summary>
            <param name="value">A value.</param>
            <param name="type">A type.</param>
            <returns>true if <paramref name="value"/> can be converted to <paramref name="type"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.IfNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            Invokes the specified delegate if the specified value is not null.
            </summary>
            <param name="value">A value.</param>
            <param name="delegate">A <see cref="T:System.Func`2"/> to invoke if <paramref name="value"/> is not null.</param>
            <returns>The result of <paramref name="delegate"/> if <paramref name="value"/> is not null; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="delegate"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.IfNotNull``2(System.Nullable{``0},System.Func{``0,``1})">
            <summary>
            Invokes the specified delegate if the specified value is not null.
            </summary>
            <param name="value">A value.</param>
            <param name="delegate">A <see cref="T:System.Func`2"/> to invoke if <paramref name="value"/> is not null.</param>
            <returns>The result of <paramref name="delegate"/> if <paramref name="value"/> is not null; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="delegate"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.EnsureNotNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null; otherwise, returns the value.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <returns>the specified value</returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.ToEnumerable``1(``0)">
            <summary>
            Retrieves an enumerable consisting of the single element <paramref name="value"/>.
            </summary>
            <param name="value">A value.</param>
            <returns>An enumerable consisting of the single element <paramref name="value"/></returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.Traverse``1(``0,System.Func{``0,``0},System.Boolean)">
            <summary>
            Traverses a sequence of values returned by a delegate.
            </summary>
            <param name="value">The first value of the traversal.</param>
            <param name="nextDelegate">A <see cref="T:System.Func`2"/> that returns the next element in the sequence.</param>
            <param name="omitNull">When true, null delegate results are ignored; when false, the traversal ends.</param>
            <returns>An enumerable containing all the traversed elements.</returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.AsCompletedTask``1(``0)">
            <summary>
            Retrieves a completed task with the specified value.
            </summary>
            <param name="value">A value.</param>
            <typeparam name="T">A type.</typeparam>
            <returns>
            A completed <see cref="T:System.Threading.Tasks.Task`1"/> whose result is <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Junior.Common.ObjectExtensions.DefaultToNull``1(``0,``0)">
            <summary>
            Returns null if <paramref name="value"/> is equal to <paramref name="default"/>.
            </summary>
            <param name="value">A value.</param>
            <param name="default">The default value to compare against.</param>
            <returns>null if <paramref name="value"/> is equal to <paramref name="default"/>; otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="T:Junior.Common.PairMapper`2">
            <summary>
            Maps between two values.
            </summary>
        </member>
        <member name="M:Junior.Common.PairMapper`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PairMapper`2"/> class. The instance initially contains no pairs.
            </summary>
        </member>
        <member name="M:Junior.Common.PairMapper`2.#ctor(System.Tuple{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PairMapper`2"/> class.
            </summary>
            <param name="pairs">An array of <see cref="T:System.Tuple`2"/> instances with which to populate the pair mapper.</param>
        </member>
        <member name="M:Junior.Common.PairMapper`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PairMapper`2"/> class.
            </summary>
            <param name="pairs">An enumerable of <see cref="T:System.Tuple`2"/> instances with which to populate the pair mapper.</param>
        </member>
        <member name="M:Junior.Common.PairMapper`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Junior.Common.PairMapper`2.Map(`0)">
            <summary>
            Maps the specified first value to its matching second value.
            </summary>
            <param name="first">A value.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.Map(`0,`1)">
            <summary>
            Maps the specified first value to its matching second value, or <paramref name="defaultValue"/> if no matching <paramref name="first"/> was found.
            </summary>
            <param name="first">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="first"/> is not found.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.MapFirst(`0)">
            <summary>
            Maps the specified first value to its matching second value.
            </summary>
            <param name="first">A value.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.MapFirst(`0,`1)">
            <summary>
            Maps the specified first value to its matching second value, or <paramref name="defaultValue"/> if no matching <paramref name="first"/> was found.
            </summary>
            <param name="first">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="first"/> is not found.</param>
            <returns>The matching second value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.Map(`1)">
            <summary>
            Maps the specified second value to its matching first value.
            </summary>
            <param name="second">A value.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.Map(`1,`1)">
            <summary>
            Maps the specified second value to its matching first value, or <paramref name="defaultValue"/> if no matching <paramref name="second"/> was found.
            </summary>
            <param name="second">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="second"/> is not found.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.MapSecond(`1)">
            <summary>
            Maps the specified second value to its matching first value.
            </summary>
            <param name="second">A value.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.MapSecond(`1,`1)">
            <summary>
            Maps the specified second value to its matching first value, or <paramref name="defaultValue"/> if no matching <paramref name="second"/> was found.
            </summary>
            <param name="second">A value.</param>
            <param name="defaultValue">The value to return if <paramref name="second"/> is not found.</param>
            <returns>The matching first value.</returns>
        </member>
        <member name="M:Junior.Common.PairMapper`2.Add(`0,`1)">
            <summary>
            Adds a new pair to the pair mapper.
            </summary>
            <param name="first">A value.</param>
            <param name="second">A value.</param>
        </member>
        <member name="T:Junior.Common.PreciseDateTime">
            <summary>
            Represents a <see cref="T:System.DateTime"/> as a <see cref="T:System.Int64"/>. <see cref="M:System.DateTime.ToFileTimeUtc"/> is used to represent the <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PreciseDateTime"/> class.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.PreciseDateTime"/> class.
            </summary>
            <param name="utcFileTime">A UTC file time.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.CompareTo(System.DateTime)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.CompareTo(System.Int64)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.CompareTo(Junior.Common.PreciseDateTime)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.Equals(System.DateTime)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.Equals(System.Int64)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.Equals(Junior.Common.PreciseDateTime)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.op_Implicit(Junior.Common.PreciseDateTime)~System.Int64">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.PreciseDateTime"/> to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.PreciseDateTime"/>.</param>
            <returns>A <see cref="T:System.Int64"/> representing the specified <see cref="T:Junior.Common.PreciseDateTime"/>.</returns>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.op_Implicit(Junior.Common.PreciseDateTime)~System.DateTime">
            <summary>
            Implicitly converts from a <see cref="T:Junior.Common.PreciseDateTime"/> to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">A <see cref="T:Junior.Common.PreciseDateTime"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the specified <see cref="T:Junior.Common.PreciseDateTime"/>.</returns>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.op_Implicit(System.DateTime)~Junior.Common.PreciseDateTime">
            <summary>
            Implicitly converts from a <see cref="T:System.DateTime"/> to a <see cref="T:Junior.Common.PreciseDateTime"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/>.</param>
            <returns>A <see cref="T:Junior.Common.PreciseDateTime"/> representing the specified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.op_Equality(Junior.Common.PreciseDateTime,Junior.Common.PreciseDateTime)">
            <summary>
            Determines if two <see cref="T:Junior.Common.PreciseDateTime"/> instances are equal.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PreciseDateTime"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.PreciseDateTime"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.PreciseDateTime"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.op_Inequality(Junior.Common.PreciseDateTime,Junior.Common.PreciseDateTime)">
            <summary>
            Determines if two <see cref="T:Junior.Common.PreciseDateTime"/> instances are not equal.
            </summary>
            <param name="left">A <see cref="T:Junior.Common.PreciseDateTime"/>.</param>
            <param name="right">A <see cref="T:Junior.Common.PreciseDateTime"/>.</param>
            <returns>true if the two <see cref="T:Junior.Common.PreciseDateTime"/> instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Junior.Common.PreciseDateTime.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Junior.Common.Ranges.StartGreaterThanEndRange`1">
            <summary>
            A range of <typeparamref name="T"/> where the start must be greater than the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.StartGreaterThanEndRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.StartGreaterThanEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is less than or equal to <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.Ranges.StartGreaterThanOrEqualToEndRange`1">
            <summary>
            A range of <typeparamref name="T"/> where the start must be greater than or equal to the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.StartGreaterThanOrEqualToEndRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.StartGreaterThanOrEqualToEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="start"/> is less than <paramref name="end"/>.</exception>
        </member>
        <member name="T:Junior.Common.Ranges.StartLessThanOrEqualToEndRange`1">
            <summary>
            A range of <typeparamref name="T"/> where the start must be less than or equal to the end.
            </summary>
        </member>
        <member name="M:Junior.Common.Ranges.StartLessThanOrEqualToEndRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.Ranges.StartLessThanOrEqualToEndRange`1"/> class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="start"/> is greater than <paramref name="end"/>.
            </exception>
        </member>
        <member name="T:Junior.Common.StringExtensions">
            <summary>
            Extensions for the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToMd5HexString(System.String)">
            <summary>
            Hashes a string using the MD5 algorithm.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <returns>The MD5-hashed value without hyphens.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.StringExtensions.EmptyToNull(System.String)">
            <summary>
            Returns null if the specified string is equal to <see cref="F:System.String.Empty"/>; otherwise, returns <paramref name="value"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <returns>null if <paramref name="value"/> is equal to <see cref="F:System.String.Empty"/>; otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.EmptyOrWhiteSpaceToNull(System.String)">
            <summary>
            Returns null if the specified string is equal to <see cref="F:System.String.Empty"/> or consists of all whitespace characters; otherwise, returns <paramref name="value"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <returns>null if <paramref name="value"/> is equal to <see cref="F:System.String.Empty"/> or consists of all whitespace characters; otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles)">
            <summary>
            Returns the specified string as a <see cref="T:System.Decimal"/> if the string is a valid <see cref="T:System.Decimal"/> in the specified style; otherwise, returns null.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="numberStyles">Number styles to allow during conversion.</param>
            <returns><paramref name="value"/> as a <see cref="T:System.Decimal"/> if the string is a valid <see cref="T:System.Decimal"/> in the specified style; otherwise, null.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.Decimal)">
            <summary>
            Returns the specified string as a <see cref="T:System.Decimal"/> if the string is a valid <see cref="T:System.Decimal"/> in the specified style; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="numberStyles">Number styles to allow during conversion.</param>
            <param name="defaultValue">The value to return if <paramref name="value"/> cannot be converted to a <see cref="T:System.Decimal"/>.</param>
            <returns><paramref name="value"/> as a <see cref="T:System.Decimal"/> if the string is a valid <see cref="T:System.Decimal"/> in the specified style; otherwise, null.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TryToDecimal(System.String,System.Globalization.NumberStyles,System.Decimal@)">
            <summary>
            Attempts to convert the specified string to a <see cref="T:System.Decimal"/> in the specified style.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="numberStyles">Number styles to allow during conversion.</param>
            <param name="result">The converted string, if conversion succeeded; otherwise, default(<see cref="T:System.Decimal"/>).</param>
            <returns>true if conversion succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.CanToDecimal(System.String,System.Globalization.NumberStyles)">
            <summary>
            Determines if the specified string can be converted to a <see cref="T:System.Decimal"/> in the specified style.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="numberStyles">Number styles to allow during testing.</param>
            <returns>true if <paramref name="value"/> can be converted to <see cref="T:System.Decimal"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Returns the specified string as <typeparamref name="T"/> if the string is a valid <typeparamref name="T"/>; otherwise, returns null.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <returns><paramref name="value"/> as <typeparamref name="T"/> if the string is a valid <typeparamref name="T"/>; otherwise, null.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Returns the specified string as <typeparamref name="T"/> if the string is a valid <typeparamref name="T"/>; otherwise, returns null.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="ignoreCase">Determines if case must be ignored.</param>
            <returns><paramref name="value"/> as <typeparamref name="T"/> if the string is a valid <typeparamref name="T"/>; otherwise, null.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Returns the specified string as <typeparamref name="T"/> if the string is a valid <typeparamref name="T"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="defaultValue">The value to return if <paramref name="value"/> cannot be converted to <typeparamref name="T"/>.</param>
            <returns><paramref name="value"/> converted to <typeparamref name="T"/> if conversion succeeded; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ToEnum``1(System.String,``0,System.Boolean)">
            <summary>
            Returns the specified string as <typeparamref name="T"/> if the string is a valid <typeparamref name="T"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="defaultValue">The value to return if <paramref name="value"/> cannot be converted to <typeparamref name="T"/>.</param>
            <param name="ignoreCase">Determines if case must be ignored.</param>
            <returns><paramref name="value"/> converted to <typeparamref name="T"/> if conversion succeeded; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TryToEnum``1(System.String,``0@)">
            <summary>
            Attempts to convert the specified string to <typeparamref name="T"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="result">The converted string, if conversion succeeded; otherwise, default(<typeparamref name="T"/>).</param>
            <returns>true if conversion succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TryToEnum``1(System.String,System.Boolean,``0@)">
            <summary>
            Attempts to convert the specified string to <typeparamref name="T"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="ignoreCase">Determines if case must be ignored.</param>
            <param name="result">The converted string, if conversion succeeded; otherwise, default(<typeparamref name="T"/>).</param>
            <returns>true if conversion succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.CanToEnum``1(System.String)">
            <summary>
            Determines if the specified string can be converted to <typeparamref name="T"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <returns>true if <paramref name="value"/> can be converted to <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.CanToEnum``1(System.String,System.Boolean)">
            <summary>
            Determines if the specified string can be converted to <typeparamref name="T"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <param name="ignoreCase">Determines if case must be ignored.</param>
            <returns>true if <paramref name="value"/> can be converted to <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.ThrowIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null or throws an <see cref="T:System.ArgumentException"/> if the specified value is empty.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty.</exception>
        </member>
        <member name="M:Junior.Common.StringExtensions.ThrowIfNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null or throws an <see cref="T:System.ArgumentException"/> if the specified value is empty or consists only of whitespace.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty or consists only of whitespace.</exception>
        </member>
        <member name="M:Junior.Common.StringExtensions.ThrowIfEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified value is empty.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty.</exception>
        </member>
        <member name="M:Junior.Common.StringExtensions.ThrowIfWhitespace(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified value is empty or consists only of whitespace.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty or consists only of whitespace.</exception>
        </member>
        <member name="M:Junior.Common.StringExtensions.EnsureNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null or throws an <see cref="T:System.ArgumentException"/> if the specified value is empty; otherwise, returns the value.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty.</exception>
            <returns>the specified value</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.EnsureNotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null or throws an <see cref="T:System.ArgumentException"/> if the specified value is empty or consists only of whitespace; otherwise, returns the value.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty or consists only of whitespace.</exception>
            <returns>the specified value</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.EnsureNotEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified value is empty; otherwise, returns the value.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty.</exception>
            <returns>the specified value</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.EnsureNotWhitespace(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified value is empty or consists only of whitespace; otherwise, returns the value.
            </summary>
            <param name="value">A value.</param>
            <param name="paramName">The value's parameter name.</param>
            <param name="argumentExceptionMessage">The exception message to use when throwing an <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is empty or consists only of whitespace.</exception>
            <returns>the specified value</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string to a maximum of <paramref name="length"/> characters.
            </summary>
            <param name="value">A string.</param>
            <param name="length">The maximum length of the returned string.</param>
            <returns>A string of no more than <paramref name="length"/> characters.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="length"/> is less than 0.</exception>
        </member>
        <member name="M:Junior.Common.StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes a leading occurrence of the specified string from <paramref name="value"/>.
            </summary>
            <param name="value">A string.</param>
            <param name="trimString">The string to trim from <paramref name="value"/>.</param>
            <returns><paramref name="value"/> with a leading occurrence of <paramref name="trimString"/> removed.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TrimStart(System.String,System.String,System.StringComparison)">
            <summary>
            Removes a leading occurrence of the specified string from <paramref name="value"/>.
            </summary>
            <param name="value">A string.</param>
            <param name="trimString">The string to trim from <paramref name="value"/>.</param>
            <param name="comparisonType">One of the enumeration values that determines how this string and value are compared.</param>
            <returns><paramref name="value"/> with a leading occurrence of <paramref name="trimString"/> removed.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TrimStart(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Removes a leading occurrence of the specified string from <paramref name="value"/>.
            </summary>
            <param name="value">A string.</param>
            <param name="trimString">The string to trim from <paramref name="value"/>.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <param name="culture">Cultural information that determines how this string and value are compared. If culture is null, the current culture is used.</param>
            <returns><paramref name="value"/> with a leading occurrence of <paramref name="trimString"/> removed.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Removes a leading occurrence of the specified string from <paramref name="value"/>.
            </summary>
            <param name="value">A string.</param>
            <param name="trimString">The string to trim from <paramref name="value"/>.</param>
            <returns><paramref name="value"/> with a leading occurrence of <paramref name="trimString"/> removed.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Removes a leading occurrence of the specified string from <paramref name="value"/>.
            </summary>
            <param name="value">A string.</param>
            <param name="trimString">The string to trim from <paramref name="value"/>.</param>
            <param name="comparisonType">One of the enumeration values that determines how this string and value are compared.</param>
            <returns><paramref name="value"/> with a leading occurrence of <paramref name="trimString"/> removed.</returns>
        </member>
        <member name="M:Junior.Common.StringExtensions.TrimEnd(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Removes a leading occurrence of the specified string from <paramref name="value"/>.
            </summary>
            <param name="value">A string.</param>
            <param name="trimString">The string to trim from <paramref name="value"/>.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <param name="culture">Cultural information that determines how this string and value are compared. If culture is null, the current culture is used.</param>
            <returns><paramref name="value"/> with a leading occurrence of <paramref name="trimString"/> removed.</returns>
        </member>
        <member name="T:Junior.Common.SystemClock">
            <summary>
            Provides the current system date and time in both local time and UTC time.
            </summary>
        </member>
        <member name="P:Junior.Common.SystemClock.LocalDate">
            <summary>
            Gets the current local date.
            </summary>
        </member>
        <member name="P:Junior.Common.SystemClock.LocalDateTime">
            <summary>
            Gets the current local date and time.
            </summary>
        </member>
        <member name="P:Junior.Common.SystemClock.LocalTime">
            <summary>
            Gets the current local time.
            </summary>
        </member>
        <member name="P:Junior.Common.SystemClock.UtcDate">
            <summary>
            Gets the current UTC date.
            </summary>
        </member>
        <member name="P:Junior.Common.SystemClock.UtcDateTime">
            <summary>
            Gets the current UTC date and time.
            </summary>
        </member>
        <member name="P:Junior.Common.SystemClock.UtcTime">
            <summary>
            Gets the current UTC time.
            </summary>
        </member>
        <member name="T:Junior.Common.TypeExtensions">
            <summary>
            Extensions for the <see cref="T:System.Type"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.TypeExtensions.GetAllPublicInstanceProperties(System.Type)">
            <summary>
            Retrieves all public instance properties on the specified type. <see cref="F:System.Reflection.BindingFlags.FlattenHierarchy"/>, <see cref="F:System.Reflection.BindingFlags.Public"/> and <see cref="F:System.Reflection.BindingFlags.Instance"/> are used.
            </summary>
            <param name="type">A type.</param>
            <returns>All public instance properties on the specified type.</returns>
        </member>
        <member name="M:Junior.Common.TypeExtensions.GetAllProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Retrieves all properties on the specified type, including interface properties if <paramref name="type"/> is an interface type.
            </summary>
            <param name="type">A type.</param>
            <param name="bindingFlags"></param>
            <returns>All properties on the specified type.</returns>
        </member>
        <member name="M:Junior.Common.TypeExtensions.ImplementsInterface``2">
            <summary>
            Determines if <typeparamref name="TConcrete"/> implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TConcrete">The concrete implementation type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <returns>true if <typeparamref name="TConcrete"/> implements <typeparamref name="TInterface"/>; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.TypeExtensions.ImplementsInterface``1(System.Type)">
            <summary>
            Determines if a concrete type implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="concreteType">A concrete type.</param>
            <returns>true if <paramref name="concreteType"/> implements <typeparamref name="TInterface"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="concreteType"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.TypeExtensions.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Determines if a concrete type implements an interface type.
            </summary>
            <param name="concreteType">A concrete type.</param>
            <param name="interfaceType">An interface type.</param>
            <returns>true if <paramref name="concreteType"/> implements <paramref name="interfaceType"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="concreteType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="interfaceType"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.TypeExtensions.ExtendsInterface``2">
            <summary>
            Determines if the <typeparamref name="TDescendant"/> interface extends the <typeparamref name="TAncestor"/> interface.
            </summary>
            <typeparam name="TDescendant">An interface type.</typeparam>
            <typeparam name="TAncestor">An interface type.</typeparam>
            <returns>true if the <typeparamref name="TDescendant"/> interface extends the <typeparamref name="TAncestor"/> interface; otherwise, false.</returns>
        </member>
        <member name="M:Junior.Common.TypeExtensions.ExtendsInterface``1(System.Type)">
            <summary>
            Determines if the an interface type extends the <typeparamref name="TAncestor"/> interface.
            </summary>
            <typeparam name="TAncestor">An interface type.</typeparam>
            <param name="descendantType">An interface type.</param>
            <returns>true if the <paramref name="descendantType"/> interface extends the <typeparamref name="TAncestor"/> interface; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="descendantType"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.TypeExtensions.ExtendsInterface(System.Type,System.Type)">
            <summary>
            Determines if the an interface type extends another interface.
            </summary>
            <param name="descendantType">An interface type.</param>
            <param name="ancestorType">An interface type.</param>
            <returns>true if the <paramref name="descendantType"/> interface extends the <paramref name="ancestorType"/> interface; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="descendantType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ancestorType"/> is null.</exception>
        </member>
        <member name="T:Junior.Common.BinaryTreeNode`2">
            <summary>
            A node in a binary tree. <see cref="T:Junior.Common.BinaryTreeNode`2"/> allows the consumer to specify the actual node type and
            the type of value nodes contain. To retrieve an immutable binary tree, reference an instance as
            <see cref="T:Junior.Common.IImmutableBinaryTreeNode`2"/>.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Value">
            <summary>
            Gets or sets the current node's value.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.LeftDescendant">
            <summary>
            Gets or sets the left descendant node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.RightDescendant">
            <summary>
            Gets or sets the right descendant node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Ancestor">
            <summary>
            Gets the ancestor node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Ancestors">
            <summary>
            Gets all ancestor nodes of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.CurrentPlusAncestors">
            <summary>
            Gets all ancestor nodes of the current node, including the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Descendants">
            <summary>
            Gets all descendant nodes of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.CurrentPlusDescendants">
            <summary>
            Gets all descendant nodes of the current node, including the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Sibling">
            <summary>
            Gets the sibling node of the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.CurrentPlusSibling">
            <summary>
            Gets the sibling node of the current node, including the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.LeavesFromRoot">
            <summary>
            Gets all leaf nodes from the root.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.LeavesFromCurrent">
            <summary>
            Gets all leaf nodes from the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Depth">
            <summary>
            Gets the depth of the current node. The root node is always depth 0.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Height">
            <summary>
            Gets the deepest depth for all nodes in the tree.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.Size">
            <summary>
            Gets a count of descendant nodes from the current node, plus the current node.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.IsRoot">
            <summary>
            Determines if the current node is the root node. A root node has no ancestor.
            </summary>
        </member>
        <member name="P:Junior.Common.BinaryTreeNode`2.IsLeaf">
            <summary>
            Determines if the current node is a leaf node. A leaf node has no descendants.
            </summary>
        </member>
        <member name="T:Junior.Common.BinaryTreeNode">
            <summary>
            A binary tree whose value type is <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:Junior.Common.UnitedStatesFiveDigitPostalCode">
            <summary>
            A United States 5-digit postal code.
            </summary>
        </member>
        <member name="F:Junior.Common.UnitedStatesFiveDigitPostalCode.RegexPattern">
            <summary>
            The regular expression pattern used by <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/>.
            </summary>
        </member>
        <member name="M:Junior.Common.UnitedStatesFiveDigitPostalCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/> class.
            </summary>
            <param name="postalCode">A postal code.</param>
        </member>
        <member name="M:Junior.Common.UnitedStatesFiveDigitPostalCode.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/> class.
            </summary>
            <param name="postalCode">A postal code.</param>
        </member>
        <member name="M:Junior.Common.UnitedStatesFiveDigitPostalCode.Parse(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/>.
            </summary>
            <param name="value">A postal code.</param>
            <returns><paramref name="value"/> as a <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Junior.Common.UnitedStatesFiveDigitPostalCode.TryParse(System.String,Junior.Common.UnitedStatesFiveDigitPostalCode@)">
            <summary>
            Attempts to parse the specified string into a <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/>.
            </summary>
            <param name="value">A postal code.</param>
            <param name="result">A <see cref="T:Junior.Common.UnitedStatesFiveDigitPostalCode"/> representing the specified postal code if <paramref name="value"/> is valid; otherwise, null.</param>
            <returns>true if the value was successfully parsed; otherwise, false.</returns>
        </member>
        <member name="T:Junior.Common.XContainerExtensions">
            <summary>
            Extensions for the <see cref="T:System.Xml.Linq.XContainer"/> type.
            </summary>
        </member>
        <member name="M:Junior.Common.XContainerExtensions.ElementValue``1(System.Xml.Linq.XContainer,System.String,``0)">
            <summary>
            Retrieves a child element's value.
            </summary>
            <param name="container">An <see cref="T:System.Xml.Linq.XContainer"/>.</param>
            <param name="elementName">The name of the element to retrieve.</param>
            <param name="defaultValue">The value to return if the element was not found.</param>
            <returns>the element's value, if found; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Junior.Common.XContainerExtensions.ElementValue(System.Xml.Linq.XContainer,System.String,System.String)">
            <summary>
            Retrieves a child element's value.
            </summary>
            <param name="container">An <see cref="T:System.Xml.Linq.XContainer"/>.</param>
            <param name="elementName">The name of the element to retrieve.</param>
            <param name="defaultValue">The value to return if the element was not found.</param>
            <returns>the element's value, if found; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
    </members>
</doc>
